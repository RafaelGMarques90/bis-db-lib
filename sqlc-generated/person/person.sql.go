// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: person.sql

package personsqlc

import (
	"context"
	"time"
)

const createPerson = `-- name: CreatePerson :exec
INSERT INTO person (name, birth_date, email) VALUES ($1, $2, $3)
`

type CreatePersonParams struct {
	Name      string
	BirthDate time.Time
	Email     string
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) error {
	_, err := q.db.ExecContext(ctx, createPerson, arg.Name, arg.BirthDate, arg.Email)
	return err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM person WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getPersonByID = `-- name: GetPersonByID :one
SELECT id, name, birth_date, email FROM person WHERE id = $1
`

func (q *Queries) GetPersonByID(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByID, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BirthDate,
		&i.Email,
	)
	return i, err
}

const listPersons = `-- name: ListPersons :many
SELECT id, name, birth_date, email FROM person
`

func (q *Queries) ListPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
