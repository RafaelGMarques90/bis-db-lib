// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package accountsqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO account (person_id, bank_name, balance) VALUES ($1, $2, $3)
`

type CreateAccountParams struct {
	PersonID int32
	BankName string
	Balance  string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount, arg.PersonID, arg.BankName, arg.Balance)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, person_id, bank_name, balance FROM account WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.BankName,
		&i.Balance,
	)
	return i, err
}

const listAccountsByPerson = `-- name: ListAccountsByPerson :many
SELECT id, person_id, bank_name, balance FROM account WHERE person_id = $1
`

func (q *Queries) ListAccountsByPerson(ctx context.Context, personID int32) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccountsByPerson, personID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.PersonID,
			&i.BankName,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE account SET balance = $2 WHERE id = $1
`

type UpdateAccountBalanceParams struct {
	ID      int32
	Balance string
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountBalance, arg.ID, arg.Balance)
	return err
}
